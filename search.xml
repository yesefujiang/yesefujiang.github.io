<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python自动化实现 Vmware Esxi 虚拟机常见操作</title>
      <link href="/2022/08/16/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E7%8E%B0-Vmware-Esxi-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/08/16/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E7%8E%B0-Vmware-Esxi-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>由于公司内需要构建一套持续集成的环境，第一步便是回退快照恢复到默认状态，手动去处理比较麻烦，所以搜索到pyvmomi库，学习并实现了常见的一些用法，具体见如下代码</p><p>执行时需要传入VMware Esxi的host、username、password信息，对应功能可以查看具体函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyVim.connect <span class="keyword">import</span> SmartConnect, Disconnect</span><br><span class="line"><span class="keyword">from</span> pyVim.task <span class="keyword">import</span> WaitForTask</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMDUtil</span>:</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, host, user=vm_host_user, password=vm_host_passwd, port=<span class="number">443</span></span>):</span><br><span class="line">        <span class="comment"># 初始化VMvare连接，返回service instance对象</span></span><br><span class="line">        self.si = SmartConnect(host=host, user=user, pwd=password, port=port, disableSslCertValidation=<span class="literal">True</span>)</span><br><span class="line">        self.content = self.si.RetrieveContent()</span><br><span class="line">        <span class="comment"># 注册一个退出函数，释放资源</span></span><br><span class="line">        atexit.register(Disconnect, self.si)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_all_vm_obj</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> self.content.rootFolder.childEntity:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(child, <span class="string">&#x27;vmFolder&#x27;</span>):</span><br><span class="line">                datacenter = child</span><br><span class="line">                vmFolder = datacenter.vmFolder</span><br><span class="line">                vmList = vmFolder.childEntity</span><br><span class="line">        <span class="keyword">return</span> vmList</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_all_vm</span>(<span class="params">self, power_on=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="comment"># 获取所有的虚拟机名称，power_on为True时，只展示在线虚拟机</span></span><br><span class="line">        vmList = self.get_all_vm_obj()</span><br><span class="line">        vm_power_on_list = []</span><br><span class="line">        vm_power_off_list = []</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> vm <span class="keyword">in</span> vmList:</span><br><span class="line">            <span class="keyword">if</span> vm.runtime.powerState == <span class="string">&quot;poweredOn&quot;</span>:</span><br><span class="line">                vm_power_on_list.append(vm.config.name)</span><br><span class="line">            <span class="keyword">elif</span> vm.runtime.powerState == <span class="string">&quot;poweredOff&quot;</span>:</span><br><span class="line">                vm_power_off_list.append(vm.config.name)</span><br><span class="line">        <span class="keyword">if</span> power_on:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;online vms: %s&quot;</span> % vm_power_on_list)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;online vms: %s\noffline vms: %s&quot;</span> % (vm_power_on_list,vm_power_off_list))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_vm_by_name</span>(<span class="params">self, vm_name</span>):</span><br><span class="line">        <span class="comment"># 通过vm_name获取vm对象</span></span><br><span class="line">        vm_list = self.get_all_vm_obj()</span><br><span class="line">        <span class="keyword">for</span> vm <span class="keyword">in</span> vm_list:</span><br><span class="line">            <span class="keyword">if</span> vm.config.name == vm_name:</span><br><span class="line">                <span class="keyword">return</span> vm</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_vm_all_snapshot</span>(<span class="params">self, vm_name</span>):</span><br><span class="line">        <span class="comment"># 获取指定虚拟机的所有快照，并以&#123;&quot;虚拟机快照名&quot;:&quot;快照对象&quot;&#125;保存</span></span><br><span class="line">        self.snapshot_dict = &#123;&#125;</span><br><span class="line">        vm = self.get_vm_by_name(vm_name)</span><br><span class="line">        snapshot_list = vm.snapshot.rootSnapshotList</span><br><span class="line">        <span class="keyword">for</span> snapshot <span class="keyword">in</span> snapshot_list:</span><br><span class="line">            self.snapshot_dict[snapshot.name] = snapshot.snapshot</span><br><span class="line">            <span class="comment"># 递归获取所有的快照</span></span><br><span class="line">            self.get_snapshot_dict(snapshot)</span><br><span class="line">        <span class="keyword">return</span> self.snapshot_dict</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_snapshot_dict</span>(<span class="params">self, snapshot</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(snapshot, <span class="string">&quot;childSnapshotList&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> snapshot <span class="keyword">in</span> snapshot.childSnapshotList:</span><br><span class="line">                self.snapshot_dict[snapshot.name] = snapshot.snapshot</span><br><span class="line">                self.get_snapshot_dict(snapshot)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recover_vm_snapshot</span>(<span class="params">self, vm_name, snapshot_name, power_on=<span class="literal">False</span></span>):</span><br><span class="line">        os.system(<span class="string">&quot;echo recover_vm_snapshot&quot;</span>)</span><br><span class="line">        <span class="comment"># 恢复快照</span></span><br><span class="line">        snapshot_dict = self.get_vm_all_snapshot(vm_name)</span><br><span class="line">        snapshot_obj = snapshot_dict[snapshot_name]</span><br><span class="line">        task = snapshot_obj.RevertToSnapshot_Task()</span><br><span class="line">        WaitForTask(task)</span><br><span class="line">        <span class="keyword">if</span> power_on:</span><br><span class="line">            <span class="comment"># 开机</span></span><br><span class="line">            self.power_on_vm(vm_name)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_vm_snapshot</span>(<span class="params">self, vm_name, snapshot_name, desc=<span class="string">&quot;desc&quot;</span></span>):</span><br><span class="line">        <span class="comment"># 获取当前虚拟机对象</span></span><br><span class="line">        vm_obj = self.get_vm_by_name(vm_name)</span><br><span class="line">        <span class="comment"># 对当前虚拟机关机并创建快照</span></span><br><span class="line">        task = vm_obj.PowerOff()</span><br><span class="line">        WaitForTask(task)</span><br><span class="line">        task = vm_obj.CreateSnapshot_Task(name=snapshot_name, description=desc, memory=<span class="literal">True</span>, quiesce=<span class="literal">False</span>)</span><br><span class="line">        WaitForTask(task)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">power_on_vm</span>(<span class="params">self, vm_name</span>):  <span class="comment"># 虚拟机开机</span></span><br><span class="line">        <span class="comment"># 根据vm_name获取虚拟机对象</span></span><br><span class="line">        vm_obj = self.get_vm_by_name(vm_name)</span><br><span class="line">        <span class="comment"># 检查虚拟机是否已开机</span></span><br><span class="line">        <span class="keyword">if</span> vm_obj.runtime.powerState == <span class="string">&quot;poweredOn&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s is online&quot;</span> % vm_name)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        task = vm_obj.PowerOn()</span><br><span class="line">        WaitForTask(task)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/vmware/pyvmomi">pyvmomi github地址</a></p><p><a href="https://github.com/vmware/pyvmomi-community-samples">pyvmomi 代码案例</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客文章</title>
      <link href="/2022/08/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2022/08/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/15/hello-world/"/>
      <url>/2022/08/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
